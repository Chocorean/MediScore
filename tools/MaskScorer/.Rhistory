'F119.jpg',-0.542539122,"N",
'F148.jpg',-0.54683826,"N",
'F165.jpg',-0.550191541,"N",
'F134.jpg',-0.555325561,"N",
'F138.jpg',-0.557889363,"N",
'F182.jpg',-0.561347729,"N",
'F176.jpg',-0.596921117,"N",
'F183.jpg',-0.618684161,"N",
'F130.jpg',-0.634802628,"N",
'F107.jpg',-0.637980182,"N",
'F122.jpg',-0.638894965,"N",
'F108.jpg',-0.64412576,"N",
'F133.jpg',-0.645606548,"N",
'F156.jpg',-0.654583603,"N",
'F158.jpg',-0.677776619,"N",
'F139.jpg',-0.699162264,"N",
'F191.jpg',-0.704587627,"N",
'F199.jpg',-0.706065424,"N",
'F163.jpg',-0.707623881,"N",
'F126.jpg',-0.719186782,"N",
'F150.jpg',-0.723182986,"N",
'F169.jpg',-0.729689724,"N",
'F105.jpg',-0.768970039,"N",
'F115.jpg',-0.785037165,"N",
'F137.jpg',-0.790631697,"N",
'F195.jpg',-0.85804542,"N",
'F200.jpg',-0.8752629,"N",
'F121.jpg',-0.886025725,"N",
'F154.jpg',-0.890458413,"N",
'F117.jpg',-0.902427599,"N",
'F186.jpg',-0.953580329,"N",
'F153.jpg',-0.958446553,"N",
'F179.jpg',-1.056473303,"N",
'F113.jpg',-1.06228261,"N",
'F146.jpg',-1.071288719,"N",
'F177.jpg',-1.077928311,"N",
'F194.jpg',-1.165444168,"N")
dim(d2) <- c(3,length(d2)/3)
d2 <- t(d2)
df2 <- data.frame(d2)
names(df2) <- c("fname","score","gt")
df2$fname <- as.character(df2$fname)
df2$score <- as.numeric(as.character(df2$score))
df2$gt <- as.character(df2$gt)
myrocs2 <- myroc(df2$score,df2$gt)
pgrocs2 <- pg.roc(df2$score,df2$gt)
xs <- unlist(pgrocs@x.values)
ys <- unlsit(pgrocs@y.values)
ys <- unlist(pgrocs@y.values)
length(x)
length(xs)
length(ys)
xs
myrocs2$fpr == xs[2:201]
myrocs2$fpr == xs[1:200]
myrocs2$fpr == xs[2:201]
myrocs2$tpr == ys[2:201]
myrocs2$tpr == ys[2:201]
help("read.csv")
help("read.csv")
getwd()
getwd()
semanticCheck <- function(basename,maskname) {
require(png)
#load both images
baseImg <- readImage(basename)
maskImg <- readPNG(maskname)
#throw excepion if not any of the following:
if (sum(dim(baseImg)[1:2] == dim(maskImg)[1:2]) < 2) {
stop("The mask image's length and width do not seem to be the same as the base image's.")
}
if(!is.na(dim(maskImg)[3])) {
stop("Mask image should be single-channel.")
}
#no values should be between min and max for mask (exclusive)
maskMax <- max(maskImg)
maskMin <- 0
if (sum((maskImg != maskMax) & (maskImg != maskMin)) > 0) {
stop("There are intermediate values in the mask that are not perfectly black and white.")
}
return(0)
}
rep(0,10)
bImg <- matrix(rep(0,10000),col=10)
bImg <- matrix(rep(0,10000),ncol=10)
bImg <- matrix(rep(0,10000),ncol=100)
mImg <- matrix(rep(0,10000),ncol=100)
dim(bImg)
dim(bImg)[1:2]
dim(mImg)[1:2]
dim(mImg)[1:2] == dim(bImg)[1:2]
sum(dim(mImg)[1:2] == dim(bImg)[1:2])
is.na("")
is.nan("")
is.empty.model("")
is.null("")
""
"" == ""
"a" != ""
"a" == ""
getwd()
opt$idx
file.path('/Volumes/medifor/NC2016_Test/reference/manipulation/NC2016_manipulation-ref.csv')
file.path('/Volumes/medifor/NC2016_Test/reference/manipulation/NC2016_manipulation-ref.csv',fsep='/')
dirname('/Volumes/medifor/NC2016_Test/reference/manipulation/NC2016_manipulation-ref.csv')
getwd()
NA > 1
(NA > 1) | (1)
#ADD: check to see if index file input image files are consistent with system output
1 != NULL
1 == NULL
is.null(NULL)
is.null(1)
mystr$abc
is.numeric(9)
is.numeric('9')
as.numeric('abc')
is.numeric(NA)
source('~/Desktop/Medifor/Medifor-Eval/scripts/metrics/mask_scorer.r')
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
source('~/Desktop/Medifor/mask_scorer_Utest.r')
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
rImg = round(matrix(rexp(10000,rate=1),ncol=100),digits=0) #exponentially random 0s and 1s.
rImg[rImg > 0] = 1
rImg[rImg == 0] = 0
sImg = rImg
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
ones(3,1)
rep(1,10)
rep(1,3,3)
rep(1,3)
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
rImg = round(matrix(rexp(10000,rate=1),ncol=100),digits=0) #exponentially random 0s and 1s.
rImg[rImg > 0] = 1
rImg[rImg == 0] = 0
length(rImg==1)
length(rImg==0)
m2img$TN
m2img <- measures_opt2(rImg,sImg,onewts)
m2imgfp <- m2img$FP
m2imgfn <- m2img$FN
m2imgtp <- m2img$TP
sImg <- rImg
dims <- dim(rImg)
onewts <- matrix(rep(1,dims[1]*dims[2]),ncol=dims[2])
m2img <- measures_opt2(rImg,sImg,onewts)
m2imgfp <- m2img$FP
m2imgfn <- m2img$FN
m2imgtp <- m2img$TP
checkEquals(m2imgfp,0)
checkEquals(m2imgfn,0)
checkEquals(m2imgtp,length(rImg==0))
m2imgtp
length(rImg==0)
rImg
dim(rImg)
length(rImg==0)
(rImg==0)
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
source('~/Desktop/Medifor/mask_scorer_Utest.r')
unit.test()
print("Index table must be supplied.", call.=FALSE)
print("Index table must be supplied.", call.=TRUE)
!FALSE
a <- {'a',}
a <- {'a','b','c'}
a <- {'a' 'b' 'c'}
a <- c('a','b','c')
a
paste(a)
paste(a,sep="")
cat(a)
print(a)
c()
a <- c()
a
a <- c(a,'a')
a
a <- cat(c('a','b'))
a
paste('a',NULL)
paste(c('a','b'))
typeof(c('a','b'))
paste(c('a','b'),collapse='')
paste(c('a','b'),collapse=', ')
paste(c('a','b'),".",collapse=', ')
paste(c('a','b'),collapse=', ',".")
paste(c('a','b'),collapse=', ')
strsplit('foo_NC2016_Manipulation_ImgOnly_p-baseline_2/foo_NC2016_Manipulation_ImgOnly_p-baseline_2.csv',".",fixed=TRUE)
unlist(strsplit('foo_NC2016_Manipulation_ImgOnly_p-baseline_2/foo_NC2016_Manipulation_ImgOnly_p-baseline_2.csv',".",fixed=TRUE))
a <- unlist(strsplit('foo_NC2016_Manipulation_ImgOnly_p-baseline_2/foo_NC2016_Manipulation_ImgOnly_p-baseline_2.csv',".",fixed=TRUE))
a
a[length(a)]
install.packages("installr")
install.packages("installr")
updateR()
install.packages("RUnit")
install.packages("optparse")
install.packages("EBImage")
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
install.packages("RMySQL")
1+1,2+2
1+1
2+2
capture.output(1+1,2+2)
capture.output(print("Hello"))
a<-capture.output(print("Hello"))
a
a[1]
a[2]
typeof(a)
a
print(a)
a
a[1]
unlist9a
unlist(a)
a<-unlist(a)
a[1]
a[2]
a[1]
a[0]
a[1]
a[1:3]
a
a[1,1]
substr(a,1,2)
substr(a,1,4)
substr(a,1,6)
substr(a,1,5)
substr(a,1,4)
substr(a,1,5)
a<-capture.output(cat("Hello"))
a
a[1]
substr(a,1)
substr(a,1,1)
substr(a,1,2)
substr(a,1,3)
substr(a,1,4)
substr(a,1,5)
capture.output(a<-cat("Hello"))
a
a
capture.output(a<-1)
a
capture.output(a<-'1')
a
capture.output(a<-print(1))
a
grepl('ab','abc')
grepl('ab',"abc")
checkEquals(grepl('ab',"abc"),TRUE)
require("RUnit")
checkEquals(grepl('ab',"abc"),TRUE)
checkEquals(grepl('ab',"abc"),FALSE)
grepl("ab","abc")
grepl("abd","abc")
foo <- function() {}
foo <- function() {cat("Hello.");return(1)}
foo()
foo <- function() {cat("Hello.\n");return(1)}
foo()
a <- capture.output(b<-foo())
b
a
foo <- function() {cat("Hello.\n");quit(status=0)}
a <- capture.output(b<-foo())
foo()
a <- try('a' + 'b')
a
print(a)
b <- try(1+2)
b
a
a[1]
a[2]
a[1]
ret <- system2("ls","xx",stdout=TRUE,stderr=TRUE)
ret
ret <- system2("ls",stdout=TRUE,stderr=TRUE)
ret
ret <- system2("ls","Applications",stdout=TRUE,stderr=TRUE)
ret
ret <- system2("ls","Desktop",stdout=TRUE,stderr=TRUE)
ret
ret[1]
ret[2]
library("png", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
grepl('+','foo')
grepl('\+','foo')
"\+"
grepl("+","foo")
grepl("\+","foo")
grepl("\\+","foo")
is.null(NA)
NA==""
NULL == ""
is.na(NULL)
is.null(NA)
is.null(NA)
is.null("")
is.null(NULL)
is.null(NaN)
is.na("")
is.null(NA) || (NA=="")
gtools::invalid(NA)
install.packages("gtools")
gtools::invalid(NA)
gtools::invalid(NULL)
gtools::invalid("")
is.finite("")
is.finite("")
---
display(rImg)
source('~/Desktop/Medifor/MediScore/tools/MaskScorer/MaskScorerUnitTest.r')
source('~/Desktop/Medifor/MediScore/tools/MaskScorer/MaskScorer.r')
a <- matrix(1,0,0,1)
a <- matrix(c(1,1,1,1),ncol=2)
dim(a)
size=7
x = seq(-(size-1)/2, (size-1)/2, length=size)
x
matrix(x,nrow=size,ncol=size)
x=matrix(x,nrow=size,ncol=size)
x
x^2
t(x)^2
eye(2)
matrix(c(1,2;2,1))
matrix(c(1,2,2,1),ncol=4)
matrix(c(1,2,2,1),ncol=2)
matrix(c(1,0,0,1),ncol=2)
exp(matrix(c(1,0,0,1),ncol=2))
z=exp(-(x^2+t(x)^2)/(2*0.3^2))
z
sum(z)
typeof(z)
sum(z)
I=matrix(c(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),ncol=4)
I
sum(I)
array(0,dim=2*c(3,round(3/sqrt(2)))+1)
round(3/sqrt(2))
-3:3
z=array(0,dim=2*c(3,round(3/sqrt(2)))+1)
for i in -3:3
for (i in -3:3) {}
for (i in -3:3) {
i_y=i
i_x=round(i/sqrt(2))
eKern[i_x+z_x+1][i_y+z_y+1]=1
}
for (i in -3:3) {
i_y=i
i_x=round(i/sqrt(2))
z[i_x+z_x+1][i_y+z_y+1]=1
}
for (i in -3:3) {
i_y=i
i_x=round(i/sqrt(2))
z[i_x+3][i_y+4]=1
}
for (i in -3:3) {
i_y=i
i_x=round(i/sqrt(2))
z[i_x+3,i_y+4]=1
}
round(i/sqrt(2))
round(-1/sqrt(2))
for (i in -3:3) {
i_y=i
i_x=round(i/sqrt(2))
z[i_x+3,i_y+4]=1
}
round(3/sqrt(2))
z
pi()
pi
tan(pi/4)
for (i in -3:3) {
i_y=i
i_x=round(i)
z[i_x+3,i_y+4]=1
}
z
z=zero(7,7)
z=zeros(7,7)
--version
version
coloredMask_opt1 <- function(sysImgName, maniImgName, erodeKernSize, dilateKernSize, rData, sData, wData, eData, dData, outputMaskPath)
{
if(FALSE)
{
#refImgName = "../../data/NC2016_Test0601/reference/splice/mask/NC2016_2228.png"
#sysImgName = "../../data/SystemOutputs/splice0601/mask/NC2016_0048_0_1.png"
#maniImgName = "../../data/NC2016_Test0601/probe/NC2016_0048.jpg"
refImgName = "../../data/SystemOutputs/dct/remaskscorer/NC2016_7876.png"
sysImgName = "../../data/SystemOutputs/dct/remaskscorer/NC2016_5749.png"
maniImgName = "../../data/SystemOutputs/dct/remaskscorer/NC2016_5749.jpg"
rImg = readImage(refImgName)
sImg = readImage(sysImgName)
#require(png)
#rImg = readPNG(refImgName)
#sImg = readPNG(sysImgName)
rData = imageData(rImg)
sImg[which(imageData(sImg) > 0.5)] <- 1
sData = imageData(sImg)
m <- generateNoScoreZone(rImg, 15, 9, "Gaussian")
wData <- m$wimg
eData <- m$eimg
dData <- m$dimg
dim(rData)
dim(sData)
dim(wData)
dim(eData)
dim(dData)
if(FALSE)
{
rData <- t(rData)
sData <- t(sData)
wData <- t(wData)
eData <- t(eData)
dData <- t(dData)
o_maniImg = readImg(maniImgName)
mData = img2r(o_maniImg)[,,1]/255;
mData = t(mData) #the opencv dim is opposite to EBImage
}
}
maniImg = readImage(maniImgName)
mData <-imageData(maniImg)[,,1] # reading as one channel (grayscale)
#dim(mData)
# values are fliped becasue the black area is the ground-truth area.
b.rImg <- binary.flip(rData)
b.sImg <- binary.flip(sData)
b.wImg <- binary.flip(wData)
b.eImg <- binary.flip(eData)
b.dImg <- binary.flip(dData)
b.sImg[which(imageData(b.sImg) != 0)] <- 1
#b.rImg[which(imageData(b.rImg) != 0)] <- 10
b.eImg[which(imageData(b.eImg) != 0)] <- 2
b.wImg[which(imageData(b.wImg) != 0)] <- 5
#length(b.eImg[which(imageData(b.eImg) == 2)])
#length(b.wImg[which(imageData(b.wImg) == 5)])
ewImg <- b.eImg + b.wImg
#ewImg[which(imageData(ewImg) != 0)]
#length(ewImg[which(imageData(ewImg) != 0)])
mImg <- ewImg + b.sImg #sys error
#errorImg = mImg
#unique(errorImg[which(imageData(errorImg) != 0)])
mImg[which(imageData(mImg) != 3)] <- 0
#display(mImg, method="raster")
col_fa <- 'blue'
col_ns <- 'yellow'
col_gt_br <- 'black' #ground-true boundary
col_fn <- 'red'
col_tp <- 'green'
myopac <- 0.5
res <- paintObjects(b.sImg, toRGB(mData), opac=c(myopac, myopac), col=c(col_fa, col_fa))
res <- paintObjects(b.wImg, res, opac=c(myopac, myopac), col=c(col_ns, col_ns))
res <- paintObjects(b.rImg, res, opac=c(myopac, myopac), col=c(col_gt_br, col_ns), thick =TRUE)
res <- paintObjects(b.eImg, res, opac=c(myopac, myopac), col=c(col_fn, col_fn))
res <- paintObjects(mImg, res, opac=c(myopac, myopac), col=c(col_tp, col_tp))
#display(res, method="raster")
#grep the system mask output name
outputMaskName <- strsplit(basename(sysImgName), '[.]')[[1]][1]
finalMaskName <- paste0(outputMaskName,"_colored.jpg")
#cat("colMaskName: ", finalMaskName, "\n")
writeImage(res, file.path(outputMaskPath, finalMaskName))
#writeImg(finalMaskName, res)
return(file.path(outputMaskPath, finalMaskName))
}
debugSource('~/Desktop/Medifor/MediScore/tools/MaskScorer/MaskScorerUnitTest.r')
shotglass
setwd('Desktop/Medifor/MediScore/tools/MaskScorer')
debugSource('~/Desktop/Medifor/MediScore/tools/MaskScorer/MaskScorerUnitTest.r')
sum(wts)
wts
wts[55:85,25:55]
sum(wts==0)
3:7
a = zeros(10)
a = zero(10,10)
a = zeros(10)
a = ones(10)
a = ones(10,10)
a = matrix(rep(0,100),ncol=10)
a
a[5:7,5:7]=1
a
